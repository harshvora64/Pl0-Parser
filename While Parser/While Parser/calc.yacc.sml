functor pl0ratLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : pl0rat_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
fun lookup "bogus" = 10000
  | lookup s = 0


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\016\000\000\000\
\\001\000\001\000\021\000\000\000\
\\001\000\001\000\031\000\012\000\030\000\020\000\029\000\021\000\028\000\
\\040\000\145\000\046\000\027\000\050\000\026\000\054\000\025\000\
\\055\000\024\000\000\000\
\\001\000\001\000\040\000\000\000\
\\001\000\001\000\054\000\002\000\053\000\015\000\052\000\016\000\051\000\
\\017\000\050\000\018\000\049\000\022\000\048\000\024\000\047\000\
\\025\000\046\000\026\000\045\000\027\000\044\000\037\000\043\000\000\000\
\\001\000\001\000\063\000\000\000\
\\001\000\003\000\154\000\004\000\154\000\005\000\154\000\006\000\154\000\
\\007\000\154\000\008\000\154\000\009\000\154\000\010\000\154\000\
\\011\000\154\000\013\000\154\000\028\000\154\000\029\000\154\000\
\\030\000\154\000\031\000\154\000\032\000\154\000\033\000\154\000\
\\034\000\154\000\035\000\154\000\038\000\154\000\041\000\154\000\
\\047\000\154\000\051\000\154\000\000\000\
\\001\000\003\000\155\000\004\000\155\000\005\000\155\000\006\000\155\000\
\\007\000\155\000\008\000\155\000\009\000\155\000\010\000\155\000\
\\011\000\155\000\013\000\155\000\028\000\155\000\029\000\155\000\
\\030\000\155\000\031\000\155\000\032\000\155\000\033\000\155\000\
\\034\000\155\000\035\000\155\000\038\000\155\000\041\000\155\000\
\\047\000\155\000\051\000\155\000\000\000\
\\001\000\003\000\156\000\004\000\156\000\005\000\156\000\006\000\156\000\
\\007\000\156\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\156\000\013\000\156\000\028\000\156\000\029\000\156\000\
\\030\000\156\000\031\000\156\000\032\000\156\000\033\000\156\000\
\\034\000\156\000\035\000\156\000\038\000\156\000\041\000\156\000\
\\047\000\156\000\051\000\156\000\000\000\
\\001\000\003\000\157\000\004\000\157\000\005\000\157\000\006\000\157\000\
\\007\000\157\000\008\000\157\000\009\000\157\000\010\000\157\000\
\\011\000\157\000\013\000\157\000\028\000\157\000\029\000\157\000\
\\030\000\157\000\031\000\157\000\032\000\157\000\033\000\157\000\
\\034\000\157\000\035\000\157\000\038\000\157\000\041\000\157\000\
\\047\000\157\000\051\000\157\000\000\000\
\\001\000\003\000\158\000\004\000\158\000\005\000\158\000\006\000\158\000\
\\007\000\158\000\008\000\158\000\009\000\158\000\010\000\158\000\
\\011\000\158\000\013\000\158\000\028\000\158\000\029\000\158\000\
\\030\000\158\000\031\000\158\000\032\000\158\000\033\000\158\000\
\\034\000\158\000\035\000\158\000\038\000\158\000\041\000\158\000\
\\047\000\158\000\051\000\158\000\000\000\
\\001\000\003\000\159\000\004\000\159\000\005\000\159\000\006\000\159\000\
\\007\000\159\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\159\000\013\000\159\000\028\000\159\000\029\000\159\000\
\\030\000\159\000\031\000\159\000\032\000\159\000\033\000\159\000\
\\034\000\159\000\035\000\159\000\038\000\159\000\041\000\159\000\
\\047\000\159\000\051\000\159\000\000\000\
\\001\000\003\000\160\000\004\000\160\000\005\000\160\000\006\000\160\000\
\\007\000\160\000\008\000\160\000\009\000\160\000\010\000\160\000\
\\011\000\160\000\013\000\160\000\028\000\160\000\029\000\160\000\
\\030\000\160\000\031\000\160\000\032\000\160\000\033\000\160\000\
\\034\000\160\000\035\000\160\000\038\000\160\000\041\000\160\000\
\\047\000\160\000\051\000\160\000\000\000\
\\001\000\003\000\161\000\004\000\161\000\005\000\161\000\006\000\161\000\
\\007\000\161\000\008\000\161\000\009\000\161\000\010\000\161\000\
\\011\000\161\000\013\000\161\000\028\000\161\000\029\000\161\000\
\\030\000\161\000\031\000\161\000\032\000\161\000\033\000\161\000\
\\034\000\161\000\035\000\161\000\038\000\161\000\041\000\161\000\
\\047\000\161\000\051\000\161\000\000\000\
\\001\000\003\000\162\000\004\000\162\000\005\000\162\000\006\000\162\000\
\\007\000\162\000\008\000\162\000\009\000\162\000\010\000\162\000\
\\011\000\162\000\013\000\162\000\028\000\162\000\029\000\162\000\
\\030\000\162\000\031\000\162\000\032\000\162\000\033\000\162\000\
\\034\000\162\000\035\000\162\000\038\000\162\000\041\000\162\000\
\\047\000\162\000\051\000\162\000\000\000\
\\001\000\003\000\163\000\004\000\080\000\005\000\079\000\006\000\163\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\163\000\028\000\163\000\029\000\163\000\
\\030\000\163\000\031\000\163\000\032\000\163\000\033\000\163\000\
\\034\000\163\000\035\000\163\000\038\000\163\000\041\000\163\000\
\\047\000\163\000\051\000\163\000\000\000\
\\001\000\003\000\164\000\004\000\164\000\005\000\164\000\006\000\164\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\164\000\028\000\164\000\029\000\164\000\
\\030\000\164\000\031\000\164\000\032\000\164\000\033\000\164\000\
\\034\000\164\000\035\000\164\000\038\000\164\000\041\000\164\000\
\\047\000\164\000\051\000\164\000\000\000\
\\001\000\003\000\165\000\004\000\165\000\005\000\165\000\006\000\165\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\165\000\028\000\165\000\029\000\165\000\
\\030\000\165\000\031\000\165\000\032\000\165\000\033\000\165\000\
\\034\000\165\000\035\000\165\000\038\000\165\000\041\000\165\000\
\\047\000\165\000\051\000\165\000\000\000\
\\001\000\003\000\166\000\004\000\080\000\005\000\079\000\006\000\166\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\166\000\028\000\166\000\029\000\166\000\
\\030\000\166\000\031\000\166\000\032\000\166\000\033\000\166\000\
\\034\000\166\000\035\000\166\000\038\000\166\000\041\000\166\000\
\\047\000\166\000\051\000\166\000\000\000\
\\001\000\003\000\167\000\004\000\167\000\005\000\167\000\006\000\167\000\
\\007\000\167\000\008\000\167\000\009\000\167\000\010\000\167\000\
\\011\000\167\000\013\000\167\000\028\000\167\000\029\000\167\000\
\\030\000\167\000\031\000\167\000\032\000\167\000\033\000\167\000\
\\034\000\167\000\035\000\167\000\038\000\167\000\041\000\167\000\
\\047\000\167\000\051\000\167\000\000\000\
\\001\000\003\000\168\000\004\000\168\000\005\000\168\000\006\000\168\000\
\\007\000\168\000\008\000\168\000\009\000\168\000\010\000\168\000\
\\011\000\168\000\013\000\168\000\028\000\168\000\029\000\168\000\
\\030\000\168\000\031\000\168\000\032\000\168\000\033\000\168\000\
\\034\000\168\000\035\000\168\000\038\000\168\000\041\000\168\000\
\\047\000\168\000\051\000\168\000\000\000\
\\001\000\003\000\169\000\004\000\169\000\005\000\169\000\006\000\169\000\
\\007\000\169\000\008\000\169\000\009\000\169\000\010\000\169\000\
\\011\000\169\000\013\000\169\000\028\000\169\000\029\000\169\000\
\\030\000\169\000\031\000\169\000\032\000\169\000\033\000\169\000\
\\034\000\169\000\035\000\169\000\038\000\169\000\041\000\169\000\
\\047\000\169\000\051\000\169\000\000\000\
\\001\000\003\000\170\000\004\000\170\000\005\000\170\000\006\000\170\000\
\\007\000\170\000\008\000\170\000\009\000\170\000\010\000\170\000\
\\011\000\170\000\013\000\170\000\028\000\170\000\029\000\170\000\
\\030\000\170\000\031\000\170\000\032\000\170\000\033\000\170\000\
\\034\000\170\000\035\000\170\000\038\000\170\000\041\000\170\000\
\\047\000\170\000\051\000\170\000\000\000\
\\001\000\003\000\171\000\004\000\171\000\005\000\171\000\006\000\171\000\
\\007\000\171\000\008\000\171\000\009\000\171\000\010\000\171\000\
\\011\000\171\000\013\000\171\000\028\000\171\000\029\000\171\000\
\\030\000\171\000\031\000\171\000\032\000\171\000\033\000\171\000\
\\034\000\171\000\035\000\171\000\038\000\171\000\041\000\171\000\
\\047\000\171\000\051\000\171\000\000\000\
\\001\000\003\000\180\000\004\000\180\000\005\000\180\000\006\000\180\000\
\\007\000\180\000\008\000\180\000\009\000\180\000\010\000\180\000\
\\011\000\180\000\013\000\180\000\028\000\180\000\029\000\180\000\
\\030\000\180\000\031\000\180\000\032\000\180\000\033\000\180\000\
\\034\000\180\000\035\000\180\000\038\000\180\000\041\000\180\000\
\\047\000\180\000\051\000\180\000\000\000\
\\001\000\003\000\181\000\004\000\181\000\005\000\181\000\006\000\181\000\
\\007\000\181\000\008\000\181\000\009\000\181\000\010\000\181\000\
\\011\000\181\000\013\000\181\000\028\000\181\000\029\000\181\000\
\\030\000\181\000\031\000\181\000\032\000\181\000\033\000\181\000\
\\034\000\181\000\035\000\181\000\038\000\181\000\041\000\181\000\
\\047\000\181\000\051\000\181\000\000\000\
\\001\000\003\000\182\000\004\000\182\000\005\000\182\000\006\000\182\000\
\\007\000\182\000\008\000\182\000\009\000\182\000\010\000\182\000\
\\011\000\182\000\013\000\182\000\028\000\182\000\029\000\182\000\
\\030\000\182\000\031\000\182\000\032\000\182\000\033\000\182\000\
\\034\000\182\000\035\000\182\000\038\000\182\000\041\000\182\000\
\\047\000\182\000\051\000\182\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\146\000\028\000\072\000\029\000\071\000\
\\030\000\070\000\031\000\069\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\172\000\028\000\172\000\029\000\172\000\
\\030\000\070\000\031\000\069\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\172\000\041\000\172\000\
\\047\000\172\000\051\000\172\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\173\000\028\000\173\000\029\000\173\000\
\\030\000\070\000\031\000\069\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\173\000\041\000\173\000\
\\047\000\173\000\051\000\173\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\174\000\028\000\174\000\029\000\174\000\
\\030\000\174\000\031\000\174\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\174\000\041\000\174\000\
\\047\000\174\000\051\000\174\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\175\000\028\000\175\000\029\000\175\000\
\\030\000\175\000\031\000\175\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\175\000\041\000\175\000\
\\047\000\175\000\051\000\175\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\176\000\028\000\176\000\029\000\176\000\
\\030\000\176\000\031\000\176\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\176\000\041\000\176\000\
\\047\000\176\000\051\000\176\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\177\000\028\000\177\000\029\000\177\000\
\\030\000\177\000\031\000\177\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\177\000\041\000\177\000\
\\047\000\177\000\051\000\177\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\178\000\028\000\178\000\029\000\178\000\
\\030\000\070\000\031\000\069\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\178\000\041\000\178\000\
\\047\000\178\000\051\000\178\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\013\000\179\000\028\000\179\000\029\000\179\000\
\\030\000\070\000\031\000\069\000\032\000\068\000\033\000\067\000\
\\034\000\066\000\035\000\065\000\038\000\179\000\041\000\179\000\
\\047\000\179\000\051\000\179\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\038\000\112\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\038\000\116\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\038\000\117\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\038\000\118\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\038\000\120\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\038\000\125\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\041\000\121\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\047\000\088\000\000\000\
\\001\000\003\000\081\000\004\000\080\000\005\000\079\000\006\000\078\000\
\\007\000\077\000\008\000\076\000\009\000\075\000\010\000\074\000\
\\011\000\073\000\028\000\072\000\029\000\071\000\030\000\070\000\
\\031\000\069\000\032\000\068\000\033\000\067\000\034\000\066\000\
\\035\000\065\000\051\000\064\000\000\000\
\\001\000\013\000\129\000\014\000\129\000\000\000\
\\001\000\013\000\138\000\000\000\
\\001\000\013\000\139\000\041\000\033\000\000\000\
\\001\000\013\000\142\000\000\000\
\\001\000\013\000\143\000\014\000\143\000\048\000\143\000\049\000\143\000\
\\052\000\143\000\000\000\
\\001\000\013\000\147\000\000\000\
\\001\000\013\000\148\000\000\000\
\\001\000\013\000\149\000\000\000\
\\001\000\013\000\150\000\000\000\
\\001\000\013\000\151\000\000\000\
\\001\000\013\000\152\000\000\000\
\\001\000\013\000\153\000\000\000\
\\001\000\013\000\020\000\000\000\
\\001\000\013\000\032\000\000\000\
\\001\000\013\000\035\000\000\000\
\\001\000\013\000\039\000\000\000\
\\001\000\013\000\061\000\000\000\
\\001\000\014\000\000\000\000\000\
\\001\000\014\000\128\000\000\000\
\\001\000\036\000\059\000\000\000\
\\001\000\037\000\041\000\000\000\
\\001\000\037\000\056\000\000\000\
\\001\000\037\000\057\000\000\000\
\\001\000\037\000\058\000\000\000\
\\001\000\037\000\084\000\000\000\
\\001\000\037\000\085\000\000\000\
\\001\000\038\000\093\000\000\000\
\\001\000\039\000\130\000\000\000\
\\001\000\039\000\131\000\053\000\131\000\000\000\
\\001\000\039\000\132\000\043\000\132\000\044\000\132\000\053\000\132\000\000\000\
\\001\000\039\000\133\000\042\000\007\000\043\000\133\000\044\000\133\000\
\\053\000\133\000\000\000\
\\001\000\039\000\134\000\044\000\134\000\053\000\134\000\000\000\
\\001\000\039\000\135\000\043\000\009\000\044\000\135\000\053\000\135\000\000\000\
\\001\000\039\000\136\000\053\000\136\000\000\000\
\\001\000\039\000\137\000\044\000\018\000\053\000\137\000\000\000\
\\001\000\039\000\140\000\000\000\
\\001\000\039\000\141\000\053\000\012\000\000\000\
\\001\000\039\000\014\000\000\000\
\\001\000\040\000\144\000\000\000\
\\001\000\040\000\038\000\000\000\
\\001\000\048\000\122\000\000\000\
\\001\000\049\000\126\000\000\000\
\\001\000\052\000\119\000\000\000\
\"
val actionRowNumbers =
"\075\000\077\000\081\000\082\000\
\\063\000\000\000\079\000\000\000\
\\057\000\072\000\001\000\045\000\
\\002\000\058\000\047\000\073\000\
\\000\000\059\000\081\000\075\000\
\\084\000\060\000\003\000\065\000\
\\004\000\004\000\066\000\067\000\
\\068\000\064\000\074\000\000\000\
\\061\000\076\000\080\000\048\000\
\\049\000\002\000\050\000\005\000\
\\044\000\004\000\004\000\023\000\
\\022\000\006\000\069\000\070\000\
\\004\000\014\000\013\000\004\000\
\\026\000\043\000\004\000\004\000\
\\004\000\004\000\046\000\078\000\
\\083\000\071\000\082\000\004\000\
\\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\
\\004\000\004\000\004\000\004\000\
\\036\000\024\000\004\000\004\000\
\\019\000\007\000\082\000\037\000\
\\038\000\039\000\027\000\051\000\
\\087\000\031\000\033\000\032\000\
\\030\000\029\000\028\000\035\000\
\\034\000\011\000\010\000\012\000\
\\009\000\008\000\018\000\017\000\
\\016\000\015\000\025\000\040\000\
\\042\000\085\000\056\000\055\000\
\\052\000\054\000\021\000\004\000\
\\082\000\041\000\086\000\020\000\
\\053\000\062\000"
val gotoT =
"\
\\001\000\125\000\002\000\004\000\003\000\003\000\005\000\002\000\
\\007\000\001\000\000\000\
\\008\000\006\000\000\000\
\\006\000\009\000\010\000\008\000\000\000\
\\004\000\011\000\000\000\
\\000\000\
\\013\000\013\000\000\000\
\\009\000\015\000\000\000\
\\013\000\017\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\021\000\014\000\020\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\032\000\000\000\
\\000\000\
\\006\000\034\000\010\000\008\000\000\000\
\\002\000\035\000\003\000\003\000\005\000\002\000\007\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\040\000\000\000\
\\012\000\053\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\058\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\021\000\014\000\060\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\080\000\000\000\
\\012\000\081\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\084\000\000\000\
\\000\000\
\\000\000\
\\012\000\085\000\000\000\
\\000\000\
\\000\000\
\\012\000\087\000\000\000\
\\012\000\088\000\000\000\
\\012\000\089\000\000\000\
\\012\000\090\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\092\000\000\000\
\\012\000\093\000\000\000\
\\012\000\094\000\000\000\
\\012\000\095\000\000\000\
\\012\000\096\000\000\000\
\\012\000\097\000\000\000\
\\012\000\098\000\000\000\
\\012\000\099\000\000\000\
\\012\000\100\000\000\000\
\\012\000\101\000\000\000\
\\012\000\102\000\000\000\
\\012\000\103\000\000\000\
\\012\000\104\000\000\000\
\\012\000\105\000\000\000\
\\012\000\106\000\000\000\
\\012\000\107\000\000\000\
\\012\000\108\000\000\000\
\\012\000\109\000\000\000\
\\000\000\
\\000\000\
\\012\000\111\000\000\000\
\\012\000\112\000\000\000\
\\000\000\
\\000\000\
\\004\000\113\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\012\000\121\000\000\000\
\\004\000\122\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 126
val numrules = 55
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | RINT of unit ->  (string) | RDEC of unit ->  (string)
 | RFRAC of unit ->  (string) | ID of unit ->  (string)
 | COMMANDLIST of unit ->  (cmd list)
 | IDLIST of unit ->  (string list) | EXP of unit ->  (exp)
 | COMMAND of unit ->  (cmd) | PROCDEF of unit ->  (procdef)
 | BOOLVARDECLS of unit ->  (decl) | INTVARDECLS of unit ->  (decl)
 | RATVARDECLS of unit ->  (decl)
 | PROCDECLS of unit ->  (procdef list)
 | VARDECLS of unit ->  (vardecls) | COMMANDSEQ of unit ->  (cmd list)
 | DECLARATIONSEQ of unit ->  (declarationseq)
 | BLOCK of unit ->  (block) | PROGRAM of unit ->  (program)
end
type svalue = MlyValue.svalue
type result = program
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 11) => true | (T 12) => true | (T 41) => true | (T 42) => true
 | (T 43) => true | (T 24) => true | (T 25) => true | (T 45) => true
 | (T 46) => true | (T 47) => true | (T 48) => true | (T 49) => true
 | (T 50) => true | (T 51) => true | (T 52) => true | (T 53) => true
 | (T 54) => true | (T 17) => true | (T 18) => true | (T 19) => true
 | (T 20) => true | (T 21) => true | (T 22) => true | _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 13) => true | _ => false
val showTerminal =
fn (T 0) => "ID"
  | (T 1) => "UNMINUS"
  | (T 2) => "PLUS"
  | (T 3) => "TIMES"
  | (T 4) => "DIV"
  | (T 5) => "SUB"
  | (T 6) => "INT_PLUS"
  | (T 7) => "INT_TIMES"
  | (T 8) => "INT_MOD"
  | (T 9) => "INT_DIV"
  | (T 10) => "INT_SUB"
  | (T 11) => "PRINT"
  | (T 12) => "SEMI"
  | (T 13) => "EOF"
  | (T 14) => "RFRAC"
  | (T 15) => "RDEC"
  | (T 16) => "INVERSE"
  | (T 17) => "MAKE_RAT"
  | (T 18) => "RAT"
  | (T 19) => "SHOWRAT"
  | (T 20) => "SHOWDECIMAL"
  | (T 21) => "FROMDECIMAL"
  | (T 22) => "TODECIMAL"
  | (T 23) => "RINT"
  | (T 24) => "TRUE"
  | (T 25) => "FALSE"
  | (T 26) => "NOT"
  | (T 27) => "ANDALSO"
  | (T 28) => "ORELSE"
  | (T 29) => "EQUALS"
  | (T 30) => "NOTEQUALS"
  | (T 31) => "LESSTHAN"
  | (T 32) => "LESSTHANEQUALS"
  | (T 33) => "GREATERTHAN"
  | (T 34) => "GREATERTHANEQUALS"
  | (T 35) => "ASSIGN"
  | (T 36) => "LPAREN"
  | (T 37) => "RPAREN"
  | (T 38) => "LBRACE"
  | (T 39) => "RBRACE"
  | (T 40) => "COMMA"
  | (T 41) => "RATIONAL"
  | (T 42) => "INTEGER"
  | (T 43) => "BOOLEAN"
  | (T 44) => "VAR"
  | (T 45) => "IF"
  | (T 46) => "THEN"
  | (T 47) => "ELSE"
  | (T 48) => "FI"
  | (T 49) => "WHILE"
  | (T 50) => "DO"
  | (T 51) => "OD"
  | (T 52) => "PROCEDURE"
  | (T 53) => "READ"
  | (T 54) => "CALL"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 54) $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 48)
 $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41)
 $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34)
 $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27)
 $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19)
 $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3) $$ (T 
2) $$ (T 1)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.BLOCK BLOCK1, BLOCK1left, BLOCK1right)) :: 
rest671)) => let val  result = MlyValue.PROGRAM (fn _ => let val  (
BLOCK as BLOCK1) = BLOCK1 ()
 in (programAST(BLOCK))
end)
 in ( LrTable.NT 0, ( result, BLOCK1left, BLOCK1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.COMMANDSEQ COMMANDSEQ1, _, COMMANDSEQ1right)
) :: ( _, ( MlyValue.DECLARATIONSEQ DECLARATIONSEQ1, 
DECLARATIONSEQ1left, _)) :: rest671)) => let val  result = 
MlyValue.BLOCK (fn _ => let val  (DECLARATIONSEQ as DECLARATIONSEQ1) =
 DECLARATIONSEQ1 ()
 val  (COMMANDSEQ as COMMANDSEQ1) = COMMANDSEQ1 ()
 in (block(DECLARATIONSEQ,COMMANDSEQ))
end)
 in ( LrTable.NT 1, ( result, DECLARATIONSEQ1left, COMMANDSEQ1right), 
rest671)
end
|  ( 2, ( ( _, ( MlyValue.PROCDECLS PROCDECLS1, _, PROCDECLS1right))
 :: ( _, ( MlyValue.VARDECLS VARDECLS1, VARDECLS1left, _)) :: rest671)
) => let val  result = MlyValue.DECLARATIONSEQ (fn _ => let val  (
VARDECLS as VARDECLS1) = VARDECLS1 ()
 val  (PROCDECLS as PROCDECLS1) = PROCDECLS1 ()
 in (declarationseq(VARDECLS,PROCDECLS))
end)
 in ( LrTable.NT 2, ( result, VARDECLS1left, PROCDECLS1right), rest671
)
end
|  ( 3, ( ( _, ( MlyValue.BOOLVARDECLS BOOLVARDECLS1, _, 
BOOLVARDECLS1right)) :: ( _, ( MlyValue.INTVARDECLS INTVARDECLS1, _, _
)) :: ( _, ( MlyValue.RATVARDECLS RATVARDECLS1, RATVARDECLS1left, _))
 :: rest671)) => let val  result = MlyValue.VARDECLS (fn _ => let val 
 (RATVARDECLS as RATVARDECLS1) = RATVARDECLS1 ()
 val  (INTVARDECLS as INTVARDECLS1) = INTVARDECLS1 ()
 val  (BOOLVARDECLS as BOOLVARDECLS1) = BOOLVARDECLS1 ()
 in (vardecls(RATVARDECLS,INTVARDECLS,BOOLVARDECLS))
end)
 in ( LrTable.NT 4, ( result, RATVARDECLS1left, BOOLVARDECLS1right), 
rest671)
end
|  ( 4, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDLIST IDLIST1,
 _, _)) :: ( _, ( _, RATIONAL1left, _)) :: rest671)) => let val  
result = MlyValue.RATVARDECLS (fn _ => let val  (IDLIST as IDLIST1) = 
IDLIST1 ()
 in (ratvardecls(IDLIST))
end)
 in ( LrTable.NT 6, ( result, RATIONAL1left, SEMI1right), rest671)
end
|  ( 5, ( rest671)) => let val  result = MlyValue.RATVARDECLS (fn _ =>
 (ratvardecls([])))
 in ( LrTable.NT 6, ( result, defaultPos, defaultPos), rest671)
end
|  ( 6, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDLIST IDLIST1,
 _, _)) :: ( _, ( _, INTEGER1left, _)) :: rest671)) => let val  result
 = MlyValue.INTVARDECLS (fn _ => let val  (IDLIST as IDLIST1) = 
IDLIST1 ()
 in (intvardecls(IDLIST))
end)
 in ( LrTable.NT 7, ( result, INTEGER1left, SEMI1right), rest671)
end
|  ( 7, ( rest671)) => let val  result = MlyValue.INTVARDECLS (fn _ =>
 (intvardecls([])))
 in ( LrTable.NT 7, ( result, defaultPos, defaultPos), rest671)
end
|  ( 8, ( ( _, ( _, _, SEMI1right)) :: ( _, ( MlyValue.IDLIST IDLIST1,
 _, _)) :: ( _, ( _, BOOLEAN1left, _)) :: rest671)) => let val  result
 = MlyValue.BOOLVARDECLS (fn _ => let val  (IDLIST as IDLIST1) = 
IDLIST1 ()
 in (boolvardecls(IDLIST))
end)
 in ( LrTable.NT 8, ( result, BOOLEAN1left, SEMI1right), rest671)
end
|  ( 9, ( rest671)) => let val  result = MlyValue.BOOLVARDECLS (fn _
 => (boolvardecls([])))
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 10, ( ( _, ( MlyValue.IDLIST IDLIST1, _, IDLIST1right)) :: _ :: (
 _, ( MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.IDLIST (fn _ => let val  (ID as ID1) = ID1 ()
 val  (IDLIST as IDLIST1) = IDLIST1 ()
 in (ID::IDLIST)
end)
 in ( LrTable.NT 12, ( result, ID1left, IDLIST1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.IDLIST (fn _ => let val  (ID as ID1) = ID1
 ()
 in ([ID])
end)
 in ( LrTable.NT 12, ( result, ID1left, ID1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.PROCDECLS PROCDECLS1, _, PROCDECLS1right))
 :: _ :: ( _, ( MlyValue.PROCDEF PROCDEF1, PROCDEF1left, _)) :: 
rest671)) => let val  result = MlyValue.PROCDECLS (fn _ => let val  (
PROCDEF as PROCDEF1) = PROCDEF1 ()
 val  (PROCDECLS as PROCDECLS1) = PROCDECLS1 ()
 in (PROCDEF::PROCDECLS)
end)
 in ( LrTable.NT 5, ( result, PROCDEF1left, PROCDECLS1right), rest671)

end
|  ( 13, ( rest671)) => let val  result = MlyValue.PROCDECLS (fn _ =>
 ([]))
 in ( LrTable.NT 5, ( result, defaultPos, defaultPos), rest671)
end
|  ( 14, ( ( _, ( MlyValue.BLOCK BLOCK1, _, BLOCK1right)) :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, PROCEDURE1left, _)) :: rest671))
 => let val  result = MlyValue.PROCDEF (fn _ => let val  (ID as ID1) =
 ID1 ()
 val  (BLOCK as BLOCK1) = BLOCK1 ()
 in (procdef(ID,BLOCK))
end)
 in ( LrTable.NT 9, ( result, PROCEDURE1left, BLOCK1right), rest671)

end
|  ( 15, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.COMMANDLIST 
COMMANDLIST1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.COMMANDSEQ (fn _ => let val  (COMMANDLIST as 
COMMANDLIST1) = COMMANDLIST1 ()
 in (COMMANDLIST)
end)
 in ( LrTable.NT 3, ( result, LBRACE1left, RBRACE1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.COMMANDLIST COMMANDLIST1, _, 
COMMANDLIST1right)) :: _ :: ( _, ( MlyValue.COMMAND COMMAND1, 
COMMAND1left, _)) :: rest671)) => let val  result = 
MlyValue.COMMANDLIST (fn _ => let val  (COMMAND as COMMAND1) = 
COMMAND1 ()
 val  (COMMANDLIST as COMMANDLIST1) = COMMANDLIST1 ()
 in (COMMAND::COMMANDLIST)
end)
 in ( LrTable.NT 13, ( result, COMMAND1left, COMMANDLIST1right), 
rest671)
end
|  ( 17, ( rest671)) => let val  result = MlyValue.COMMANDLIST (fn _
 => ([]))
 in ( LrTable.NT 13, ( result, defaultPos, defaultPos), rest671)
end
|  ( 18, ( ( _, ( MlyValue.EXP EXP1, _, EXP1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.COMMAND (fn _ => let val  (ID as ID1) = ID1 ()
 val  (EXP as EXP1) = EXP1 ()
 in (assignmentcmd(ID,EXP))
end)
 in ( LrTable.NT 10, ( result, ID1left, EXP1right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( _, 
CALL1left, _)) :: rest671)) => let val  result = MlyValue.COMMAND (fn
 _ => let val  (ID as ID1) = ID1 ()
 in (callcmd(ID))
end)
 in ( LrTable.NT 10, ( result, CALL1left, ID1right), rest671)
end
|  ( 20, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.ID ID1, _, _
)) :: _ :: ( _, ( _, READ1left, _)) :: rest671)) => let val  result = 
MlyValue.COMMAND (fn _ => let val  (ID as ID1) = ID1 ()
 in (readcmd(ID))
end)
 in ( LrTable.NT 10, ( result, READ1left, RPAREN1right), rest671)
end
|  ( 21, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.EXP EXP1, _,
 _)) :: _ :: ( _, ( _, PRINT1left, _)) :: rest671)) => let val  result
 = MlyValue.COMMAND (fn _ => let val  (EXP as EXP1) = EXP1 ()
 in (printcmd(EXP))
end)
 in ( LrTable.NT 10, ( result, PRINT1left, RPAREN1right), rest671)
end
|  ( 22, ( ( _, ( _, _, FI1right)) :: ( _, ( MlyValue.COMMANDSEQ 
COMMANDSEQ2, _, _)) :: _ :: ( _, ( MlyValue.COMMANDSEQ COMMANDSEQ1, _,
 _)) :: _ :: ( _, ( MlyValue.EXP EXP1, _, _)) :: ( _, ( _, IF1left, _)
) :: rest671)) => let val  result = MlyValue.COMMAND (fn _ => let val 
 (EXP as EXP1) = EXP1 ()
 val  COMMANDSEQ1 = COMMANDSEQ1 ()
 val  COMMANDSEQ2 = COMMANDSEQ2 ()
 in (conditionalcmd(EXP,COMMANDSEQ1,COMMANDSEQ2))
end)
 in ( LrTable.NT 10, ( result, IF1left, FI1right), rest671)
end
|  ( 23, ( ( _, ( _, _, OD1right)) :: ( _, ( MlyValue.COMMANDSEQ 
COMMANDSEQ1, _, _)) :: _ :: ( _, ( MlyValue.EXP EXP1, _, _)) :: ( _, (
 _, WHILE1left, _)) :: rest671)) => let val  result = MlyValue.COMMAND
 (fn _ => let val  (EXP as EXP1) = EXP1 ()
 val  (COMMANDSEQ as COMMANDSEQ1) = COMMANDSEQ1 ()
 in (whilecmd(EXP,COMMANDSEQ))
end)
 in ( LrTable.NT 10, ( result, WHILE1left, OD1right), rest671)
end
|  ( 24, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.EXP EXP1, _,
 _)) :: _ :: ( _, ( _, SHOWRAT1left, _)) :: rest671)) => let val  
result = MlyValue.COMMAND (fn _ => let val  (EXP as EXP1) = EXP1 ()
 in (showratcmd(EXP))
end)
 in ( LrTable.NT 10, ( result, SHOWRAT1left, RPAREN1right), rest671)

end
|  ( 25, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.EXP EXP1, _,
 _)) :: _ :: ( _, ( _, SHOWDECIMAL1left, _)) :: rest671)) => let val  
result = MlyValue.COMMAND (fn _ => let val  (EXP as EXP1) = EXP1 ()
 in (showdecimalcmd(EXP))
end)
 in ( LrTable.NT 10, ( result, SHOWDECIMAL1left, RPAREN1right), 
rest671)
end
|  ( 26, ( ( _, ( MlyValue.RINT RINT1, RINT1left, RINT1right)) :: 
rest671)) => let val  result = MlyValue.EXP (fn _ => let val  (RINT
 as RINT1) = RINT1 ()
 in (intval(BigInt.int_make_bigint(RINT)))
end)
 in ( LrTable.NT 11, ( result, RINT1left, RINT1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.EXP EXP1, _, EXP1right)) :: ( _, ( _, 
UNMINUS1left, _)) :: rest671)) => let val  result = MlyValue.EXP (fn _
 => let val  (EXP as EXP1) = EXP1 ()
 in (unexp(unminus,EXP))
end)
 in ( LrTable.NT 11, ( result, UNMINUS1left, EXP1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(int_add,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(int_mul,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(int_intdiv,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(int_sub,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(int_mod,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.RFRAC RFRAC1, RFRAC1left, RFRAC1right)) :: 
rest671)) => let val  result = MlyValue.EXP (fn _ => let val  (RFRAC
 as RFRAC1) = RFRAC1 ()
 in (ratval(Rational.from_frac(RFRAC)))
end)
 in ( LrTable.NT 11, ( result, RFRAC1left, RFRAC1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.RDEC RDEC1, RDEC1left, RDEC1right)) :: 
rest671)) => let val  result = MlyValue.EXP (fn _ => let val  (RDEC
 as RDEC1) = RDEC1 ()
 in (ratval(Rational.fromDecimal(RDEC)))
end)
 in ( LrTable.NT 11, ( result, RDEC1left, RDEC1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(add,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(multiply,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(divide,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(subtract,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.EXP EXP1, _, EXP1right)) :: ( _, ( _, 
INVERSE1left, _)) :: rest671)) => let val  result = MlyValue.EXP (fn _
 => let val  (EXP as EXP1) = EXP1 ()
 in (unexp(inverse,EXP))
end)
 in ( LrTable.NT 11, ( result, INVERSE1left, EXP1right), rest671)
end
|  ( 40, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.EXP EXP2, _,
 _)) :: _ :: ( _, ( MlyValue.EXP EXP1, _, _)) :: _ :: ( _, ( _, 
MAKE_RAT1left, _)) :: rest671)) => let val  result = MlyValue.EXP (fn
 _ => let val  (EXP as EXP1) = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(make_rat,EXP,EXP))
end)
 in ( LrTable.NT 11, ( result, MAKE_RAT1left, RPAREN1right), rest671)

end
|  ( 41, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.EXP EXP1, _,
 _)) :: _ :: ( _, ( _, FROMDECIMAL1left, _)) :: rest671)) => let val  
result = MlyValue.EXP (fn _ => let val  (EXP as EXP1) = EXP1 ()
 in (EXP)
end)
 in ( LrTable.NT 11, ( result, FROMDECIMAL1left, RPAREN1right), 
rest671)
end
|  ( 42, ( ( _, ( _, TRUE1left, TRUE1right)) :: rest671)) => let val  
result = MlyValue.EXP (fn _ => (boolval(true)))
 in ( LrTable.NT 11, ( result, TRUE1left, TRUE1right), rest671)
end
|  ( 43, ( ( _, ( _, FALSE1left, FALSE1right)) :: rest671)) => let
 val  result = MlyValue.EXP (fn _ => (boolval(false)))
 in ( LrTable.NT 11, ( result, FALSE1left, FALSE1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(equal,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(neq,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(less,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(geq,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(leq,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(greater,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(AND,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.EXP EXP2, _, EXP2right)) :: _ :: ( _, ( 
MlyValue.EXP EXP1, EXP1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  EXP1 = EXP1 ()
 val  EXP2 = EXP2 ()
 in (binexp(OR,EXP1,EXP2))
end)
 in ( LrTable.NT 11, ( result, EXP1left, EXP2right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.EXP EXP1, _, EXP1right)) :: ( _, ( _, 
NOT1left, _)) :: rest671)) => let val  result = MlyValue.EXP (fn _ =>
 let val  (EXP as EXP1) = EXP1 ()
 in (unexp(NOT,EXP))
end)
 in ( LrTable.NT 11, ( result, NOT1left, EXP1right), rest671)
end
|  ( 53, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.EXP EXP1, _,
 _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val  result = 
MlyValue.EXP (fn _ => let val  (EXP as EXP1) = EXP1 ()
 in (EXP)
end)
 in ( LrTable.NT 11, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 54, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.EXP (fn _ => let val  (ID as ID1) = ID1 ()
 in (id(ID))
end)
 in ( LrTable.NT 11, ( result, ID1left, ID1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.PROGRAM x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : pl0rat_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun UNMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun DIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun SUB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun INT_PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun INT_TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun INT_MOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun INT_DIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun INT_SUB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun PRINT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun RFRAC (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.RFRAC (fn () => i),p1,p2))
fun RDEC (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.RDEC (fn () => i),p1,p2))
fun INVERSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun MAKE_RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun RAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun SHOWRAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun SHOWDECIMAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun FROMDECIMAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun TODECIMAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun RINT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.RINT (fn () => i),p1,p2))
fun TRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun FALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun NOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ANDALSO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun ORELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun NOTEQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun LESSTHAN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun LESSTHANEQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun GREATERTHAN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun GREATERTHANEQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun RATIONAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun INTEGER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun BOOLEAN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun FI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun OD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun PROCEDURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun READ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun CALL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
end
end
